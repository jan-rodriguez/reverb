// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using MoPhoGames.USpeak.Interface;

public class VoiceSender : MonoBehaviour, ISpeechDataHandler
{
	USpeaker spk;
	private Light otherPlayerLight;
	private Light myLight;
	private const float MY_SENSITIVITY = .1f;
	private const float MIN_LIGHT_DECREASE = 1.0f;
	private const float MAX_LIGHT_INTENSITY = 2.0f;
	private const float LOUD_TO_RANGE_RATIO = 20.0f;
	private float loudness = 0;

	void Start() {
		spk = USpeaker.Get (gameObject);
		if (networkView.isMine) {
			gameObject.AddComponent<AudioListener> ();
			myLight = gameObject.GetComponent<Light> ();
			spk.SpeakerMode = SpeakerMode.Local;
			this.tag = null;
		}else{
			spk.SpeakerMode = SpeakerMode.Remote;
		}
	}

	void Update() {
		if (audio != null) {
			UpdateMyLight();
		}
	}

	#region ISpeechDataHandler Members

	public void USpeakOnSerializeAudio( byte[] data ){
		networkView.RPC ("vc", RPCMode.All, data);
	}

	public void USpeakInitializeSettings( int data ){
		networkView.RPC ("init", RPCMode.All, data);
	}

	#endregion

	[RPC]
	void init( int data ){
		spk.InitializeSettings (data);
	}

	[RPC]
	void vc( byte[] data ){
		spk.ReceiveAudio (data);
	}

	private void UpdateMyLight(){
		float[] data = new float[256];

		audio.GetOutputData(data,0);

		float newLoudness = GetAverage (data);

		print ("New loud = " + newLoudness);

		myLight.intensity = newLoudness;
	}

	public float GetAverage(float[] data){
		float a = 0;
		
		foreach (float s in data) {
			a += s;
		}
		
		return a / data.Length;
	}

	//Set the other player's camera
	private void SetOtherPlayerLight() {
		if (otherPlayerLight == null) {
			otherPlayerLight = GameObject.FindGameObjectWithTag ("Player").GetComponent<Light>();
		}
	}

//	private float[] ByteToFloat( byte[] data ){
//
//		// create a second float array and copy the bytes into it...
//		float[] floatArray2 = new float[(data.Length / 4)+1];
//		Buffer.BlockCopy(data, 0, floatArray2, 0, data.Length);
//
//		return floatArray2;
//	}

}

